#!/usr/bin/env bash

# Function to display usage information
usage() {
    echo "Usage: $0 <image_name> [--domain <domain>] [--udp-only <file>] [--tcp-only <file>] [--both <file>]"
    echo "  <image_name>        - Required: Name of output image"
    echo "  --domain <domain>   - Optional: Domain to process (default: google.com)"
    echo "  --analysis <file>   - Optional: File to save the analysis to (default ips_analysis.txt) (input for plot)"
    echo "  --data <file>       - Optional: File of all IPs (default: ips.txt) (previous dig_script data_file)"
    echo "  --udp-only <file>   - Optional: File of UDP-only results (default: dig_udp_only.txt)"
    echo "  --tcp-only <file>   - Optional: File of TCP-only results (default: dig_tcp_only.txt)"
    echo "  --both <file>       - Optional: File of both results (default: dig_both.txt)"
    echo "  --error <file>      - Optional: File for error results (default: dig_errors.txt)"
    exit 1
}

# Ensure the required arguments are specified
if [[ $# -lt 1 ]]; then
    usage
fi

# Assign positional parameters to variables
image_name="$1"
shift 1

# Default values for optional arguments
domain="google.com"
file_analysis="ips_analysis.txt"
file_data="ips.txt"
file_both="dig_both.txt"
file_udp_only="dig_udp_only.txt"
file_tcp_only="dig_tcp_only.txt"
file_errors="dig_errors.txt"

# Parse optional arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --domain)
            domain="$2"
            shift 2
            ;;
        --analysis)
            file_analysis="$2"
            shift 2
            ;;
        --data)
            file_data="$2"
            shift 2
            ;;
        --udp-only)
            file_udp_only="$2"
            shift 2
            ;;
        --tcp-only)
            file_tcp_only="$2"
            shift 2
            ;;
        --both)
            file_both="$2"
            shift 2
            ;;
        --error)
            file_errors="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Other variables
plot_title="Nameserver Analysis - UDP vs TCP for $domain"

# Categories and values
nr_ips=$(wc "$file_data" | awk '{print $1}')
nr_ips_both=$(wc "$file_both" | awk '{print $1}')
nr_ips_udp_only=$(wc "$file_udp_only" | awk '{print $1}')
nr_ips_tcp_only=$(wc "$file_tcp_only" | awk '{print $1}')
nr_ips_erros=$(wc "$file_errors" | awk '{print $1}')
nr_ips_not_reachable=$(grep "not reachable" "$file_errors" | wc | awk '{print $1}')
nr_ips_other_errors=$(grep -V "not reachable" "$file_errors" | wc | awk '{print $1}')

echo "Generate analysis file"
echo "IPs,$nr_ips" > "$file_analysis"
echo "UDP and TCP,$nr_ips_both" >> "$file_analysis"
echo "UDP,$nr_ips_udp_only" >> "$file_analysis"
echo "TCP,$nr_ips_tcp_only" >> "$file_analysis"
echo "not reachable,$nr_ips_not_reachable" >> "$file_analysis"
echo "other errors,$nr_ips_other_errors" >> "$file_analysis"


echo "Generate plot '$plot_title' and save to $image_name"
gnuplot -persist -c "plot.gp" "$image_name" "$plot_title" "$file_analysis"

