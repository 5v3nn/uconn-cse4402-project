#!/usr/bin/env bash

# set -x                          # TODO remove debugging

# Function to display usage information
usage() {
    echo "Usage: $0 <data_file> [--domain <domain>] [--udp-only <file>] [--tcp-only <file>] [--both <file>] [--record-type <resource record>]"
    echo "  <data_file>         - Required: Path to the data file"
    echo "  --domain <domain>   - Optional: Domain to process (default: google.com)"
    echo "  --udp-only <file>   - Optional: File for UDP-only results (default: dig_udp_only.txt)"
    echo "  --tcp-only <file>   - Optional: File for TCP-only results (default: dig_tcp_only.txt)"
    echo "  --both <file>       - Optional: File for both results (default: dig_both.txt)"
    echo "  --error <file>      - Optional: File for error results (default: dig_errors.txt)"
    echo "  -v                  - Optional: Verbose (default: not set)"
    echo "  -P <N>              - Optional: Processes to run in parallel (default: 1)"
    echo "  --record-type        - Optional: Resource Record Request (default: A)"
    exit 1
}

# Ensure the required arguments are specified
if [[ $# -lt 1 ]]; then
    usage
fi

# Assign positional parameters to variables
file_data="$1"
shift 1

# Default values for optional arguments
domain="google.com"
file_both="dig_both.txt"
file_udp_only="dig_udp_only.txt"
file_tcp_only="dig_tcp_only.txt"
file_errors="dig_errors.txt"
v=false
processes=1
record_type="A"

# Parse optional arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --domain)
            domain="$2"
            shift 2
            ;;
        --udp-only)
            file_udp_only="$2"
            shift 2
            ;;
        --tcp-only)
            file_tcp_only="$2"
            shift 2
            ;;
        --both)
            file_both="$2"
            shift 2
            ;;
        --error)
            file_errors="$2"
            shift 2
            ;;
        -v)
            v=true
            shift 1
            ;;
        -P)
            processes="$2"
            shift 2
            ;;
        --record-type) 
            record_type="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

process_ip() {
    local ip="$1"
    local domain="$2"
    local file_both="$3"
    local file_udp_only="$4"
    local file_tcp_only="$5"
    local file_errors="$6"
    local v="$7"
    local record_type="$8"

    if [[ -z "$ip" ]]; then return; fi

    # Check if the IP is a valid IPv4 address
    if [[ ! "$ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        $v && echo "$ip is not a valid IPv4 address"
        return
    fi

    # Create a baseline
    dig_output=$(dig @"$ip" "$domain" "$record_type" +tries=3)
    dig_exit_status=$?

    if [ $dig_exit_status -eq 9 ]; then
        # If not reachable (dig exit status 9)
        $v && echo "$ip: not reachable"
        echo "$ip: not reachable" >> "$file_errors"
        return
    elif [ $dig_exit_status -ne 0 ]; then
        # If other error
        $v && echo "$ip: some other dig error (status=$dig_exit_status)"
        echo "$ip: some other dig error (status=$dig_exit_status)" >> "$file_errors"
        return
    fi


    # If reachable, test UDP and TCP
    dig_udp=$(dig @"$ip" "$domain" +notcp "$record_type" +ignore +tries=3 )
    dig_tcp=$(dig @"$ip" "$domain" +tcp "$record_type" +ignore +tries=3)
    udp_success=false
    tcp_success=false

    if grep -q "status: NOERROR" <<< "$dig_udp"; then
        udp_success=true
    fi
    if grep -q "status: NOERROR" <<< "$dig_tcp"; then
        tcp_success=true
    fi

    # If both digs are successful, write to file_both
    # If only udp was successful, write to file_udp_only
    # If only tcp was successful, write to file_tcp_only
    # Otherwise, write to error.txt
    if $udp_success && $tcp_success; then
        $v && echo "$ip: both"
        echo "$ip" >> "$file_both"
    elif $udp_success; then
        $v && echo "$ip: udp only"
        echo "$ip" >> "$file_udp_only"
    elif $tcp_success; then
        $v && echo "$ip: tcp only"
        echo "$ip" >> "$file_tcp_only"
    else
        $v && echo "$ip: error on determining udp/tcp force"
        echo "$ip: $(echo "$dig_output" | tr '\n' ' ')" >> "$file_errors"
    fi
}

export -f process_ip

cat "$file_data" | xargs -I {} -P "$processes" bash -c 'process_ip "$@"' _ {} "$domain" "$file_both" "$file_udp_only" "$file_tcp_only" "$file_errors" "$v" "$record_type"

